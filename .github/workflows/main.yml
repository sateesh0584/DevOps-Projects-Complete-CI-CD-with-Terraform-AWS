name: Deploy App

on:
  push:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}    
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_STATE_BUCKET_NAME: ${{ secrets.AWS_TF_STATE_BUCKET_NAME }}
  PRIVATE_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
  PUBLIC_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PUBLIC }}
  AWS_REGION: us-east-1

jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    outputs:
      SERVER_PUBLIC_IP: ${{ steps.set-ip.outputs.instance_public_ip }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Terraform Init
        run: terraform init -backend-config="bucket=${TF_STATE_BUCKET_NAME}" -backend-config="region=${AWS_REGION}"
        working-directory: ./terraform
      - name: Terraform Plan
        run: |
          terraform plan -destroy \
          -var="region=${AWS_REGION}" \
          -var="public_key=${PUBLIC_SSH_KEY}" \
          -var="private_key=${PRIVATE_SSH_KEY}" \
          -var="key_name=us-east" \
          -out=PLAN
        working-directory: ./terraform
      - name: Terraform Apply
        run: terraform apply PLAN
        working-directory: ./terraform
      - name: Set Output
        id: set-ip
        run: echo "::set-output name=instance_public_ip::$(terraform output instance_public_ip)"
        working-directory: ./terraform

  deploy-app:
    runs-on: ubuntu-latest
    needs: deploy-infra
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set IP Env Variable
        run: echo SERVER_PUBLIC_IP=${{ needs.deploy-infra.outputs.SERVER_PUBLIC_IP }} >> $GITHUB_ENV
      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build and Push Docker Image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: example-node-app
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        working-directory: ./nodeapp
      - name: Deploy Docker Image to EC2
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: example-node-app
          IMAGE_TAG: ${{ github.sha }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_PUBLIC_IP }}
          username: ubuntu
          key: ${{ env.PRIVATE_SSH_KEY }}
          script: |
            sudo apt update
            sudo apt install -y docker.io awscli
            sudo usermod -aG docker ubuntu
            newgrp docker
            eval $(aws ecr get-login --no-include-email --region us-east-1)
            docker stop myappcontainer || true
            docker rm myappcontainer || true
            docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG
            docker run -d --name myappcontainer -p 80:8080 $REGISTRY/$REPOSITORY:$IMAGE_TAG
